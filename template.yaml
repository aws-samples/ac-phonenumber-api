AWSTemplateFormatVersion: 2010-09-09
Description: >
  Amazon Connect Phone number APIs demo

Mappings: 
  FunctionMap:
      Configuration:
          S3Bucket: "amazon-connect-blogs2"
          S3Key: "srrampra-Ram/programmatically-manange-phone-numbers-using-an-pi-in-amazon-connect/"
 
Parameters:
  CFS3BucketForWebSite:
    Default:  "phone-number-api-website"
    Type: String
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
    ConstraintDescription: 'Invalid S3 Bucket name'
    Description: Enter the (globally unique) name you would like to use for the Amazon S3 bucket where we will store the website assets and the sample search user api. This template will fail to deploy if the bucket name you chose is currently in use.

  CFSInstanceARNParam:
    Default:  ""
    Type: String    
    ConstraintDescription: 'Invalid Amazon Connect Instance ARN'
    Description: "Amazon Connect Instance full ARN that you will have access to execute the search API"

            
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Amazon S3 Configuration 
        Parameters:
          - CFS3BucketForWebSite
      - Label:
          default: Amazon Connect Instance Configuration 
        Parameters:
          - CFSInstanceARNParam
    ParameterLabels:
      CFS3BucketForWebSite:
          default: "S3 bucket name"
      CFSInstanceARNParam:
          default: "Amazon Connect ARN" 

Outputs:
  CloudfrontEndpoint:
      Description: Endpoint for Cloudfront distribution
      Value: !Join
        - ''
        - - 'https://'
          - !GetAtt [CFCloudFrontDistribution, DomainName]
          - '/phoneNumber.html'
      
Resources:
           
    createWebSiteS3Bucket:
        Type: 'AWS::S3::Bucket'
        Properties:
            BucketName: !Ref CFS3BucketForWebSite
            PublicAccessBlockConfiguration:
                BlockPublicAcls: True
                BlockPublicPolicy: True
                IgnorePublicAcls: True
                RestrictPublicBuckets: True
            WebsiteConfiguration:
                IndexDocument: phoneNumber.html
                ErrorDocument: error.html
 
 
    CFS3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        DependsOn:
            - CFCloudFrontDistributionAccessIdentity
        Properties:
            Bucket: !Ref createWebSiteS3Bucket
            PolicyDocument:
                Statement:
                    -
                        Action:
                            - "s3:GetObject"
                        Effect: "Allow"
                        Principal:
                            CanonicalUser:
                                Fn::GetAtt: [ CFCloudFrontDistributionAccessIdentity , S3CanonicalUserId ]
                        Resource:
                            !Sub ${createWebSiteS3Bucket.Arn}/phonenumber-site/*

    CFCloudFrontDistributionAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
          CloudFrontOriginAccessIdentityConfig:
            Comment: 'CloudFront endpoint for Search User API s3'
            
    CFCloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
          DistributionConfig:
            Origins:
            - DomainName:
                !Join
                    - ''
                    - - !Ref CFS3BucketForWebSite
                      - .s3.amazonaws.com
              Id: !Ref CFS3BucketForWebSite
              OriginPath: '/phonenumber-site'
              S3OriginConfig:
                OriginAccessIdentity:
                    !Join
                        - ''
                        - - 'origin-access-identity/cloudfront/'
                          - !Ref CFCloudFrontDistributionAccessIdentity
            Enabled: 'true'
            Logging:
                Bucket: !GetAtt createWebSiteS3Bucket.DomainName
                Prefix: 'logs/'
                IncludeCookies: 'true'
            Comment: CloudFront for Search User API
            DefaultRootObject: phoneNumber.html
            DefaultCacheBehavior:
                AllowedMethods:
                    - DELETE
                    - GET
                    - HEAD
                    - OPTIONS
                    - PATCH
                    - POST
                    - PUT
                TargetOriginId: !Ref CFS3BucketForWebSite
                ForwardedValues:
                    QueryString: true
                    Cookies:
                        Forward: all
                ViewerProtocolPolicy: redirect-to-https
            Restrictions:
                GeoRestriction:
                    RestrictionType: whitelist
                    Locations:
                        - US

    CFWebsiteCreatorRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          Path: "/"
          Policies:
            -
              PolicyName: !Sub ${AWS::StackName}-phoneNumber-creator-policy
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - 'logs:CreateLogGroup'
                      - 'logs:CreateLogStream'
                      - 'logs:PutLogEvents'
                    Resource:
                      - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                  -
                    Effect: "Allow"
                    Action:
                      - "s3:PutObject"
                      - "s3:GetObject"
                      - "s3:PutObjectAcl"
                    Resource:
                      -  !Join
                          - ''
                          - - 'arn:'
                            - !Ref 'AWS::Partition'
                            - ':s3:::'
                            - !Ref CFS3BucketForWebSite
                            - '/*'
                  -
                    Effect: "Allow"
                    Action:
                      - "s3:PutBucketPublicAccessBlock"
                    Resource:
                      -  !Join
                          - ''
                          - - 'arn:'
                            - !Ref 'AWS::Partition'
                            - ':s3:::'
                            - !Ref CFS3BucketForWebSite
                  -
                    Effect: "Allow"
                    Action:
                      - "s3:GetObject"
                    Resource:
                      -  !Join
                          - ''
                          - - 'arn:'
                            - !Ref 'AWS::Partition'
                            - ':s3:::'
                            - 'amazon-connect-blogs2'
                            - '/*'

    webSiteCreator:
      Type: "AWS::Lambda::Function"
      Properties:
        Description:  >
            AWS Lambda Function that will create the website and upload it to the S3 bucket
        Handler: "index.handler"
        Role: !GetAtt CFWebsiteCreatorRole.Arn
        Runtime: "nodejs14.x"
        MemorySize: 256
        Timeout: 120
        Code: ./website-creator
                      
    invokeWebSiteCreator:
        Type: Custom::CreateWebSite
        DependsOn: createWebSiteS3Bucket
        Properties:  
            ServiceToken:  !GetAtt webSiteCreator.Arn
            customAction: configureWebsite
            Region: !Ref AWS::Region
            destS3Bucket: !Ref CFS3BucketForWebSite
            destS3KeyPrefix: phonenumber-site
            identityPoolId: !Ref BlogCognitoIDPool
            userPoolID: !Ref BlogUserPool
            appClientId: !Ref BlogUserPoolClient
            instanceARN : !Ref CFSInstanceARNParam

    SNSRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Principal: 
                  Service: 
                    - "cognito-idp.amazonaws.com"
                Action: 
                  - "sts:AssumeRole"
          Policies:
            - PolicyName: !Sub ${AWS::StackName}-blog-userpool-su-sns-policy
              PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - Effect: "Allow"
                    Action: "sns:publish"
                    Resource: "*"     
                    
    BlogUserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
          UserPoolName: !Join 
              - ''
              - - !Ref AWS::StackName
                - "-blog-user-pool"          
          AutoVerifiedAttributes:
            - phone_number
            - email
          MfaConfiguration: "OFF"
          SmsConfiguration:
             ExternalId: !Sub blog-phonenumber-client
             SnsCallerArn: !GetAtt SNSRole.Arn
          Policies:
              PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: False
                    RequireNumbers: False
                    RequireSymbols: False
                    RequireUppercase: False

    BlogUserPoolClient:
        Type: "AWS::Cognito::UserPoolClient"
        Properties:
          ClientName: blog-phonenumber-client
          GenerateSecret: false
          UserPoolId: !Ref BlogUserPool

    BlogCognitoIDPool:
        Type: 'AWS::Cognito::IdentityPool'
        Properties:
          AllowUnauthenticatedIdentities: true
          CognitoIdentityProviders: 
              - ClientId: !Ref BlogUserPoolClient
                ProviderName: !GetAtt BlogUserPool.ProviderName   

    BlogCognitoIDIamRoleAuth:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                      Federated:
                        - cognito-identity.amazonaws.com
                    Action:
                      - 'sts:AssumeRoleWithWebIdentity'
                    Condition: { "ForAnyValue:StringLike": {"cognito-identity.amazonaws.com:amr": "authenticated" },  "StringEquals": {"cognito-identity.amazonaws.com:aud": !Ref BlogCognitoIDPool}}
            
            Path: /
            Policies:
                - PolicyName: !Sub ${AWS::StackName}-blog-searchuser-cognito-identity-authenticated
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      -
                        Effect: "Allow"
                        Action:
                          - "connect:ClaimPhoneNumber"                          
                        Resource: !Sub ${CFSInstanceARNParam}
                      -
                        Effect: "Allow"
                        Action:
                          - "connect:AssociatePhoneNumberContactFlow"
                          - "connect:ListContactFlows"
                        Resource: !Sub "${CFSInstanceARNParam}/contact-flow/*"
                      -
                        Effect: "Allow"
                        Action:
                          - "connect:ClaimPhoneNumber"
                          - "connect:ReleasePhoneNumber"
                          - "connect:AssociatePhoneNumberContactFlow"
                          - "connect:DisassociatePhoneNumberContactFlow"
                          - "connect:ListPhoneNumbers"
                          - "connect:ListPhoneNumbersV2"
                          - "connect:SearchAvailablePhoneNumbers"
                          - "connect:DescribePhoneNumber"
                        Resource: !Sub "arn:aws:connect:${AWS::Region}:${AWS::AccountId}:phone-number/*"
                        
                      - Effect: Allow
                        Action:
                          - 'mobileanalytics:PutEvents'
                        Resource: '*'

    BlogCognitoIDIamRoleUnAuth:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                      Federated:
                        - cognito-identity.amazonaws.com
                    Action:
                      - 'sts:AssumeRoleWithWebIdentity'
                    Condition: { "ForAnyValue:StringLike": {"cognito-identity.amazonaws.com:amr": "unauthenticated" },  "StringEquals": {"cognito-identity.amazonaws.com:aud": !Ref BlogCognitoIDPool}}
            
            Path: /
            Policies:
                - PolicyName: !Sub ${AWS::StackName}-blog-searchuser-cognito-identity-unauthenticated
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action:
                          - 'mobileanalytics:PutEvents'
                        Resource: '*'
                        
    BlogCognitoIDIamRoleAttachment:
        Type: "AWS::Cognito::IdentityPoolRoleAttachment"
        Properties:
            IdentityPoolId: !Ref BlogCognitoIDPool
            Roles: {"authenticated": !GetAtt BlogCognitoIDIamRoleAuth.Arn, "unauthenticated": !GetAtt BlogCognitoIDIamRoleUnAuth.Arn}